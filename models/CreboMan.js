const getDb = require('../util/database/db').getDb;

const Uuid = require('uuid');

// CreboObject is the schema of the crebo document.
// This object will be used to manage database operations.
const CreboObject = {
    id: null,           // Type UUIDv4
    code: null,         // Type string, example "25606"
    level: null,        // Type string, example "4" stands for "MBO niveau 4"
    name: null,         // Type string, example "expert IT systems and devices"
    description: null,  // Type string, official description of the crebo.
    sbblink: null,      // Type string, example "https://kwalificatie-mijn.s-bb.nl/kwalificatie/expert-it-systems-and-devices/cmVzdWx0YWF0VHlwZT01O2Rvc3NpZXJJZD01MTMwO2t3YWxpZmljYXRpZUlkPTEzMjE0NzY="
    kdpdflink: null     // Type string, example "https://kwalificatie-mijn.s-bb.nl/Details/DownloadDocument/1402198"
}


// CreboDbReturnObject is the schema of the returning object after the operations.
// The returning object has always the same structure.
// Each operation (insert, update, delete and find) has its own function to translate the
// result from MongoDb to a default result.
const CreboDbReturnObject = {
    operation: null,    // Type string, example "insert", "delete", "update", "get"
    passed: null,       // Type boolean, example true if the operation sucseeded.
    count: null,        // Type integer, example 3 -> 3 operations sucseeded.
    result: [{}],       // Type CreboObject, an array of CreboObjects with the updated information.
    before: [{}]        // Type CreboObject, an array of CreboObjects with the information before updating.
}


// ErrObject is the schema of the resturning object after an operation failed.
// The returning object for errors has always the same struture.
// Eech operation (insert, update, delete and find) has its own catch block.
const ErrObject = {
    type: null,             // Type number, example 503, https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
    errors: [               // Type array, more errors can be returned to the client.
        {
            code: null,     // Type string, example "NotNull"
            detail: null,   // Type string, detailed information for the user.
            source: null    // Type string, example "creboModel/Delete"
        }
    ]
}


// insertOneErr will generate a default error object from the type ErrObject.
// Example for calling this function.
// insertOneErr([{
//         code: "NoDbConnection",
//         detail: "Unable to save the information because of connection problems.",
//         source: "AllCrebos/insertOne"
//     }])
function insertOneErr(errArray) {
    const errorMessage = ErrObject;

    errorMessage.type = 503;
    errorMessage.errors = errArray;

    return errorMessage;
}

// insertOneReturnObject will generate a default object for database management.
// it converts the MongoDB return object to a default object.
function insertOneReturnObject(newCreboObjectArray) {
    const returnObject = CreboDbReturnObject;

    returnObject.operation = "insert";
    returnObject.passed = true;
    returnObject.count = newCreboObjectArray.length;
    returnObject.result = newCreboObjectArray;
    returnObject.before = [];

    return returnObject;
}


// insertOne inserts one crebo document into the crebo collection.
// newCrebo parameter is a object with all the crebo information. The id (uuidv4) of the
// newCrebo object will be generated by this function.
// After the document is inserted this function will return with a default object.
// returned object will be generated by the function insertOneReturnObject().
async function insertOne(newCrebo) {
    // Check if the newCrebo object has a id field.
    // Creating a id field if it not exist.
    const id = Uuid.v4();
    if (!newCrebo.id) {
        newCrebo.id = id;
    }

    // Insert the newCrebo object into the crebo collection.
    db = getDb();
     return db
        .collection('crebo')
        .insertOne(newCrebo)
        .then(
            insertResult => {
                // console.log('insertResult in CreboMan.js>insertOne>then', insertResult);
                // console.log('insertResultObject in CremoMan.js>insertOne>then', insertOneReturnObject([newCrebo]));
                return insertOneReturnObject([newCrebo]);
            }
        )
        .catch(
            err => {
                console.log('Err insertResult in CreboMan.js>insertOne>catch', err);

                // Generate a default error message.
                errMessage = insertOneErr(
                    [{
                        code: "SaveDb",
                        detail: "Unable to save the information because of connection problems.",
                        source: "AllCrebos/insertOne/crebo"
                    }])

                // console.log('models>CreboMan>insertOne>catch()>errMessage', errMessage);

                const error = new Error(JSON.stringify(errMessage));
                // console.log('models>CreboMan>insertOne>catch()>error', error);
                
                throw error;
            }
        )
}
exports.insertOne = insertOne;


// updateOne updates one crebo document from the crebo collection.
// updatedCrebo parameter is a object with all the updated crebo information. The id
// is also present in the updatedcrebo object.
async function updateOne(updatedCrebo) {

}
exports.updateOne = updateOne;


// getOne fetches one document from the crebo collection.
// creboId will be used to fetch the document with the request id.
// The MongDB _id field will not be used. Each crebo document has its own id field.
async function getOne(creboId) {

}
exports.getOne = getOne;


// deleteOne deletes one document from the crebo collection.
// creboId will be used to delete the document with the given id.
// The MongoDB _id field will not be used. Each crebo document has its own id field.
async function deleteOne(creboId) {

}
exports.deleteOne = deleteOne;


// insertMany inserts many documents into the crebo collection.
// newCreboArray is een array of Crebo objects. Each crebo object has no id.
// for each crebo document a id field (uuidv4) will be generated.
async function insertMany(newCreboArray) {

}
exports.insertMany = insertMany;


// getAll fetches all documents from the crebo collection.
async function getAll() {

}
exports.getAll = getAll;


// deleteAll deletes all documents from the crebo collection.
// VERY RISKY METHOD: shut only be used by administrators.
async function deleteAll() {

}
exports.deleteAll = deleteAll;