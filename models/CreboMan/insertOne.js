const CreboModel = require('./schema');

const Uuid = require('uuid');

const { 
    insertOneErr, 
    insertOneReturnObject,
    insertOneToBroker } = require('../../lib/models/insertOne');

// insertOne inserts one crebo document into the crebo collection.
// newCrebo parameter is a object with all the crebo information. The id (uuidv4) of the
// newCrebo object will be generated by this function.
// After the document is inserted this function will return with a default object.
// returned object will be generated by the function insertOnenewReturnObject().
async function insertOne(newCrebo) {
    console.log('models>CreboMan>insertOne>insertOne')

    // Check if the newCrebo object has a id field.
    // Creating a id field if it not exist.
    const id = Uuid.v4();
    if (!newCrebo.id) {
        newCrebo.id = id;
    }

    // All new kerntaken and werkprocessen get a unique UUID.
    // This function checks if the Crebo has kerntaken and werkprocessen.
    if (newCrebo.kerntaken) {
        for (let i = 0; i < newCrebo.kerntaken.length; i++) {
            newCrebo.kerntaken[i].id = Uuid.v4();

            if (newCrebo.kerntaken[i].werkprocessen) {
                for (let j = 0; j < newCrebo.kerntaken[i].werkprocessen.length; j++) {
                    newCrebo.kerntaken[i].werkprocessen[j].id = Uuid.v4();
                }
            }
        }
    }

    console.log(`models>CreboMan>insertOne>Top: ${JSON.stringify(newCrebo)}`);
    // Insert the newCrebo object into the crebo collection.

    const crebo = new CreboModel(newCrebo);
    return crebo
        .save()
        .then(
            () => {
                // console.log('insertResult in CreboMan.js>insertOne>then');
                // console.log('insertResultObject in CremoMan.js>insertOne>then', insertOnenewReturnObject([newCrebo]));

                insertOneToBroker(newCrebo);

                return insertOneReturnObject([newCrebo]);
            }
        )
        .catch(
            err => {
                // console.log('Err insertResult in CreboMan.js>insertOne>catch', err);

                // Generate a default error message.
                errMessage = insertOneErr(
                    [{
                        code: "SaveDb",
                        message: "Cannot save the information.",
                        detail: "Unable to save the information because of connection problems.",
                        source: "AllCrebos/insertOne/crebo"
                    }])

                // console.log('models>CreboMan>insertOne>catch()>errMessage', errMessage);

                const error = new Error(JSON.stringify(errMessage));
                // console.log('models>CreboMan>insertOne>catch()>error', error);

                throw error;
            }
        )
}

exports.insertOne = insertOne;