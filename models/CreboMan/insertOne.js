const getDb = require('../../util/database/db').getDb;
const CreboObject = require('./schema');
const ErrObject = require('./error');

const Uuid = require('uuid');

// CreboDbReturnObject is the schema of the returning object after the operations.
// The returning object has always the same structure.
// Each operation (insert, update, delete and find) has its own function to translate the
// result from MongoDb to a default result.
const CreboDbReturnObject = {
    operation: null,    // Type string, example "insert", "delete", "update", "get"
    passed: null,       // Type boolean, example true if the operation sucseeded.
    count: null,        // Type integer, example 3 -> 3 operations sucseeded.
    result: [{}],       // Type CreboObject, an array of CreboObjects with the updated information.
    before: [{}]        // Type CreboObject, an array of CreboObjects with the information before updating.
}


// insertOneErr will generate a default error object from the type ErrObject.
// Example for calling this function.
// insertOneErr([{
//         code: "NoDbConnection",
//         detail: "Unable to save the information because of connection problems.",
//         source: "AllCrebos/insertOne"
//     }])
function insertOneErr(errArray) {
    const errorMessage = ErrObject;

    errorMessage.type = 503;
    errorMessage.errors = errArray;

    return errorMessage;
}

// insertOneReturnObject will generate a default object for database management.
// it converts the MongoDB return object to a default object.
function insertOneReturnObject(newCreboObjectArray) {
    const returnObject = CreboDbReturnObject;

    returnObject.operation = "insert";
    returnObject.passed = true;
    returnObject.count = newCreboObjectArray.length;
    returnObject.result = newCreboObjectArray;
    returnObject.before = [];

    return returnObject;
}


// insertOne inserts one crebo document into the crebo collection.
// newCrebo parameter is a object with all the crebo information. The id (uuidv4) of the
// newCrebo object will be generated by this function.
// After the document is inserted this function will return with a default object.
// returned object will be generated by the function insertOneReturnObject().
async function insertOne(newCrebo) {
    // Check if the newCrebo object has a id field.
    // Creating a id field if it not exist.
    const id = Uuid.v4();
    if (!newCrebo.id) {
        newCrebo.id = id;
    }

    // Insert the newCrebo object into the crebo collection.
    db = getDb();
     return db
        .collection('crebo')
        .insertOne(newCrebo)
        .then(
            insertResult => {
                console.log('insertResult in CreboMan.js>insertOne>then', insertResult);
                // console.log('insertResultObject in CremoMan.js>insertOne>then', insertOneReturnObject([newCrebo]));
                return insertOneReturnObject([newCrebo]);
            }
        )
        .catch(
            err => {
                console.log('Err insertResult in CreboMan.js>insertOne>catch', err);

                // Generate a default error message.
                errMessage = insertOneErr(
                    [{
                        code: "SaveDb",
                        message: "Cannot save the information.",
                        detail: "Unable to save the information because of connection problems.",
                        source: "AllCrebos/insertOne/crebo"
                    }])

                // console.log('models>CreboMan>insertOne>catch()>errMessage', errMessage);

                const error = new Error(JSON.stringify(errMessage));
                // console.log('models>CreboMan>insertOne>catch()>error', error);
                
                throw error;
            }
        )
}
exports.insertOne = insertOne;
