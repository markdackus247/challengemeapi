const CreboModel = require('./schema');
const ErrObject = require('./error');
const returnObject = require('./returnObject');
const { getOne } = require('./getOne');


const Uuid = require('uuid');

// insertOneErr will generate a default error object from the type ErrObject.
// Example for calling this function.
// insertOneErr([{
//         code: "NoDbConnection",
//         detail: "Unable to save the information because of connection problems.",
//         source: "AllCrebos/insertOne"
//     }])
function updateOneErr(errArray) {
    const errorMessage = ErrObject;

    errorMessage.type = 503;
    errorMessage.errors = errArray;

    return errorMessage;
}


// insertOnenewReturnObject will generate a default object for database management.
// it converts the MongoDB return object to a default object.
function updateOneReturnObject(newCreboObjectArray) {
    const newReturnObject = returnObject;

    newReturnObject.operation = "insert";
    newReturnObject.passed = true;
    newReturnObject.count = newCreboObjectArray.length;
    newReturnObject.result = newCreboObjectArray;
    newReturnObject.before = [];

    return newReturnObject;
}

// updateOne updates one crebo document from the crebo collection.
// updatedCrebo parameter is a object with all the updated crebo information. The id
// is also present in the updatedcrebo object.
// After the document is inserted this function will return with a default object.
// returned object will be generated by the function updateOnenewReturnObject().
async function updateOne(id, updatedCrebo) {
    // console.log(`models>CreboMan>updateOne>updateOne>updatedCrebo: ${updatedCrebo}`);

    return getOne(id)
        .then(
            getResult => {
                // console.log(`models>CreboMan>updateOne>updateOne>getResult: ${getResult}`);
                return getResult;                
            }
        )
        .catch(
            err => {
                console.log(err);
            }
        )
}

exports.updateOne = updateOne;